{"version":3,"file":"app/account.chunk.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AACA;AAGA;AACA;AAMA;AACA;AAGA;AAMA;AACA;AACA;AACA;AAIA;AACA;AAMA;AACA;AACA;AACA;AACA;AAGA;AACA;AAOA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;ACjGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAEA;AAEA;AACA;AACA;AACA;;AACA;AAGA;AACA;AAMA;AACA;AACA;AACA;AAGA;AAMA;AACA;AACA;AACA;AAGA;AAMA;AACA;AACA;AACA;AACA;AAGA;AAOA;AACA;AAOA;AAEA","sources":["webpack://campr/./src/main/webapp/app/modules/account/index.tsx","webpack://campr/./src/main/webapp/app/modules/account/password/password.tsx","webpack://campr/./src/main/webapp/app/modules/account/settings/settings.tsx"],"sourcesContent":["import React from 'react';\r\n\r\nimport ErrorBoundaryRoute from 'app/shared/error/error-boundary-route';\r\n\r\nimport Settings from './settings/settings';\r\nimport Password from './password/password';\r\n\r\nconst Routes = ({ match }) => (\r\n  <div>\r\n    <ErrorBoundaryRoute path={`${match.url}/settings`} component={Settings} />\r\n    <ErrorBoundaryRoute path={`${match.url}/password`} component={Password} />\r\n  </div>\r\n);\r\n\r\nexport default Routes;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Translate, translate, ValidatedField, ValidatedForm } from 'react-jhipster';\r\nimport { Row, Col, Button } from 'reactstrap';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport { useAppDispatch, useAppSelector } from 'app/config/store';\r\nimport { getSession } from 'app/shared/reducers/authentication';\r\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\r\nimport { savePassword, reset } from './password.reducer';\r\n\r\nexport const PasswordPage = () => {\r\n  const [password, setPassword] = useState('');\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(reset());\r\n    dispatch(getSession());\r\n    return () => {\r\n      dispatch(reset());\r\n    };\r\n  }, []);\r\n\r\n  const handleValidSubmit = ({ currentPassword, newPassword }) => {\r\n    dispatch(savePassword({ currentPassword, newPassword }));\r\n  };\r\n\r\n  const updatePassword = event => setPassword(event.target.value);\r\n\r\n  const account = useAppSelector(state => state.authentication.account);\r\n  const successMessage = useAppSelector(state => state.password.successMessage);\r\n  const errorMessage = useAppSelector(state => state.password.errorMessage);\r\n\r\n  useEffect(() => {\r\n    if (successMessage) {\r\n      toast.success(translate(successMessage));\r\n    } else if (errorMessage) {\r\n      toast.error(translate(errorMessage));\r\n    }\r\n  }, [successMessage, errorMessage]);\r\n\r\n  return (\r\n    <div>\r\n      <Row className=\"justify-content-center\">\r\n        <Col md=\"8\">\r\n          <h2 id=\"password-title\">\r\n            <Translate contentKey=\"password.title\" interpolate={{ username: account.login }}>\r\n              Password for {account.login}\r\n            </Translate>\r\n          </h2>\r\n          <ValidatedForm id=\"password-form\" onSubmit={handleValidSubmit}>\r\n            <ValidatedField\r\n              name=\"currentPassword\"\r\n              label={translate('global.form.currentpassword.label')}\r\n              placeholder={translate('global.form.currentpassword.placeholder')}\r\n              type=\"password\"\r\n              validate={{\r\n                required: { value: true, message: translate('global.messages.validate.newpassword.required') },\r\n              }}\r\n              data-cy=\"currentPassword\"\r\n            />\r\n            <ValidatedField\r\n              name=\"newPassword\"\r\n              label={translate('global.form.newpassword.label')}\r\n              placeholder={translate('global.form.newpassword.placeholder')}\r\n              type=\"password\"\r\n              validate={{\r\n                required: { value: true, message: translate('global.messages.validate.newpassword.required') },\r\n                minLength: { value: 4, message: translate('global.messages.validate.newpassword.minlength') },\r\n                maxLength: { value: 50, message: translate('global.messages.validate.newpassword.maxlength') },\r\n              }}\r\n              onChange={updatePassword}\r\n              data-cy=\"newPassword\"\r\n            />\r\n            <PasswordStrengthBar password={password} />\r\n            <ValidatedField\r\n              name=\"confirmPassword\"\r\n              label={translate('global.form.confirmpassword.label')}\r\n              placeholder={translate('global.form.confirmpassword.placeholder')}\r\n              type=\"password\"\r\n              validate={{\r\n                required: { value: true, message: translate('global.messages.validate.confirmpassword.required') },\r\n                minLength: { value: 4, message: translate('global.messages.validate.confirmpassword.minlength') },\r\n                maxLength: { value: 50, message: translate('global.messages.validate.confirmpassword.maxlength') },\r\n                validate: v => v === password || translate('global.messages.error.dontmatch'),\r\n              }}\r\n              data-cy=\"confirmPassword\"\r\n            />\r\n            <Button color=\"success\" type=\"submit\" data-cy=\"submit\">\r\n              <Translate contentKey=\"password.form.button\">Save</Translate>\r\n            </Button>\r\n          </ValidatedForm>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PasswordPage;\r\n","import React, { useEffect } from 'react';\r\nimport { Button, Col, Row } from 'reactstrap';\r\nimport { Translate, translate, ValidatedField, ValidatedForm, isEmail } from 'react-jhipster';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport { locales, languages } from 'app/config/translation';\r\nimport { useAppDispatch, useAppSelector } from 'app/config/store';\r\nimport { getSession } from 'app/shared/reducers/authentication';\r\nimport { saveAccountSettings, reset } from './settings.reducer';\r\n\r\nexport const SettingsPage = () => {\r\n  const dispatch = useAppDispatch();\r\n  const account = useAppSelector(state => state.authentication.account);\r\n  const successMessage = useAppSelector(state => state.settings.successMessage);\r\n\r\n  useEffect(() => {\r\n    dispatch(getSession());\r\n    return () => {\r\n      dispatch(reset());\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (successMessage) {\r\n      toast.success(translate(successMessage));\r\n    }\r\n  }, [successMessage]);\r\n\r\n  const handleValidSubmit = values => {\r\n    dispatch(\r\n      saveAccountSettings({\r\n        ...account,\r\n        ...values,\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Row className=\"justify-content-center\">\r\n        <Col md=\"8\">\r\n          <h2 id=\"settings-title\">\r\n            <Translate contentKey=\"settings.title\" interpolate={{ username: account.login }}>\r\n              User settings for {account.login}\r\n            </Translate>\r\n          </h2>\r\n          <ValidatedForm id=\"settings-form\" onSubmit={handleValidSubmit} defaultValues={account}>\r\n            <ValidatedField\r\n              name=\"firstName\"\r\n              label={translate('settings.form.firstname')}\r\n              id=\"firstName\"\r\n              placeholder={translate('settings.form.firstname.placeholder')}\r\n              validate={{\r\n                required: { value: true, message: translate('settings.messages.validate.firstname.required') },\r\n                minLength: { value: 1, message: translate('settings.messages.validate.firstname.minlength') },\r\n                maxLength: { value: 50, message: translate('settings.messages.validate.firstname.maxlength') },\r\n              }}\r\n              data-cy=\"firstname\"\r\n            />\r\n            <ValidatedField\r\n              name=\"lastName\"\r\n              label={translate('settings.form.lastname')}\r\n              id=\"lastName\"\r\n              placeholder={translate('settings.form.lastname.placeholder')}\r\n              validate={{\r\n                required: { value: true, message: translate('settings.messages.validate.lastname.required') },\r\n                minLength: { value: 1, message: translate('settings.messages.validate.lastname.minlength') },\r\n                maxLength: { value: 50, message: translate('settings.messages.validate.lastname.maxlength') },\r\n              }}\r\n              data-cy=\"lastname\"\r\n            />\r\n            <ValidatedField\r\n              name=\"email\"\r\n              label={translate('global.form.email.label')}\r\n              placeholder={translate('global.form.email.placeholder')}\r\n              type=\"email\"\r\n              validate={{\r\n                required: { value: true, message: translate('global.messages.validate.email.required') },\r\n                minLength: { value: 5, message: translate('global.messages.validate.email.minlength') },\r\n                maxLength: { value: 254, message: translate('global.messages.validate.email.maxlength') },\r\n                validate: v => isEmail(v) || translate('global.messages.validate.email.invalid'),\r\n              }}\r\n              data-cy=\"email\"\r\n            />\r\n            <ValidatedField type=\"select\" id=\"langKey\" name=\"langKey\" label={translate('settings.form.language')} data-cy=\"langKey\">\r\n              {locales.map(locale => (\r\n                <option value={locale} key={locale}>\r\n                  {languages[locale].name}\r\n                </option>\r\n              ))}\r\n            </ValidatedField>\r\n            <Button color=\"secondary\" type=\"submit\" data-cy=\"submit\">\r\n              <Translate contentKey=\"settings.form.button\">Save</Translate>\r\n            </Button>\r\n          </ValidatedForm>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SettingsPage;\r\n"],"names":[],"sourceRoot":""}