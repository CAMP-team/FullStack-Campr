{"version":3,"file":"app/administration.chunk.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACnFA;AACA;AACA;AAEA;AACA;AAEA;;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAOA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAQA;AAGA;AAEA;;;;;;;;;;;;;;;;;ACnHA;AAEA;AAEA;AAEA;AAYA;;;;;;;;;;;;;;;;;AClBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAMA;AACA;AAMA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAGA;AACA;AACA;;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AAEA;AAGA;AAWA;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;;;;AC3FA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAKA;AAGA;AACA;AAEA;AACA;AAOA;AAOA;AAOA;AAOA;AAOA;AAcA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;ACnHA;AACA;AACA;AAWA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;;AAEA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAeA;AAKA;AASA;AAMA;AAEA;AACA;AAOA;AAEA;AACA;AAQA;AAEA;;;;;;;;;;;;;;;;;;;;;;ACrHA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAIA;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AACA;;AAEA;AAEA;AACA;;AAEA;AAKA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;ACtDA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA;AAEA;AAIA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AAKA;AACA;AAAA;AACA;AACA;AAKA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;ACxGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAKA;AAUA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;AAOA;AAOA;AACA;;AAEA;AACA;;AAIA;AACA;;AAEA;AAQA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpLA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AAOA;AAMA;AACA;AACA;AAEA;AAQA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAGA;AACA;AAIA;AACA;AACA;AAGA;AAIA;AAIA;AACA;AAEA;AAEA;AAGA;AAEA;AAGA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAGA;AAOA;AAAA;AACA;AACA;AASA;AAEA;AACA;AAEA;AACA;AAcA;AAEA;;;;;;;;;;;;;;;;;;ACrOA;AACA;AACA;AACA","sources":["webpack://campr/./src/main/webapp/app/modules/administration/docs/docs.scss","webpack://campr/./src/main/webapp/app/modules/administration/docs/docs.scss?defe","webpack://campr/./src/main/webapp/app/modules/administration/configuration/configuration.tsx","webpack://campr/./src/main/webapp/app/modules/administration/docs/docs.tsx","webpack://campr/./src/main/webapp/app/modules/administration/health/health-modal.tsx","webpack://campr/./src/main/webapp/app/modules/administration/health/health.tsx","webpack://campr/./src/main/webapp/app/modules/administration/index.tsx","webpack://campr/./src/main/webapp/app/modules/administration/logs/logs.tsx","webpack://campr/./src/main/webapp/app/modules/administration/metrics/metrics.tsx","webpack://campr/./src/main/webapp/app/modules/administration/user-management/index.tsx","webpack://campr/./src/main/webapp/app/modules/administration/user-management/user-management-delete-dialog.tsx","webpack://campr/./src/main/webapp/app/modules/administration/user-management/user-management-detail.tsx","webpack://campr/./src/main/webapp/app/modules/administration/user-management/user-management-update.tsx","webpack://campr/./src/main/webapp/app/modules/administration/user-management/user-management.tsx","webpack://campr/./src/main/webapp/app/shared/util/pagination.constants.ts"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"iframe {\\n  background: white;\\n}\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/main/webapp/app/modules/administration/docs/docs.scss\"],\"names\":[],\"mappings\":\"AAAA;EACE,iBAAA;AACF\",\"sourcesContent\":[\"iframe {\\r\\n  background: white;\\r\\n}\\r\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\n      import API from \"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/postcss-loader/dist/cjs.js!../../../../../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[1].use[3]!./docs.scss\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === \"default\") {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === \"default\") {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var isNamedExport = !content.locals;\n    var oldLocals = isNamedExport ? namedExport : content.locals;\n\n    module.hot.accept(\n      \"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/postcss-loader/dist/cjs.js!../../../../../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[1].use[3]!./docs.scss\",\n      function () {\n        if (!isEqualLocals(oldLocals, isNamedExport ? namedExport : content.locals, isNamedExport)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = isNamedExport ? namedExport : content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\n\nexport * from \"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/postcss-loader/dist/cjs.js!../../../../../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[1].use[3]!./docs.scss\";\n       export default content && content.locals ? content.locals : undefined;\n","import React, { useState, useEffect } from 'react';\r\nimport { Table, Input, Row, Col, Badge } from 'reactstrap';\r\nimport { Translate } from 'react-jhipster';\r\n\r\nimport { getConfigurations, getEnv } from '../administration.reducer';\r\nimport { useAppDispatch, useAppSelector } from 'app/config/store';\r\n\r\nexport const ConfigurationPage = () => {\r\n  const [filter, setFilter] = useState('');\r\n  const [reversePrefix, setReversePrefix] = useState(false);\r\n  const [reverseProperties, setReverseProperties] = useState(false);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const configuration = useAppSelector(state => state.administration.configuration);\r\n\r\n  useEffect(() => {\r\n    dispatch(getConfigurations());\r\n    dispatch(getEnv());\r\n  }, []);\r\n\r\n  const changeFilter = evt => setFilter(evt.target.value);\r\n\r\n  const envFilterFn = configProp => configProp.toUpperCase().includes(filter.toUpperCase());\r\n\r\n  const propsFilterFn = configProp => configProp.prefix.toUpperCase().includes(filter.toUpperCase());\r\n\r\n  const changeReversePrefix = () => setReversePrefix(!reversePrefix);\r\n\r\n  const changeReverseProperties = () => setReverseProperties(!reverseProperties);\r\n\r\n  const getContextList = contexts =>\r\n    Object.values(contexts)\r\n      .map((v: any) => v.beans)\r\n      .reduce((acc, e) => ({ ...acc, ...e }));\r\n\r\n  const configProps = configuration?.configProps ?? {};\r\n\r\n  const env = configuration?.env ?? {};\r\n\r\n  return (\r\n    <div>\r\n      <h2 id=\"configuration-page-heading\" data-cy=\"configurationPageHeading\">\r\n        <Translate contentKey=\"configuration.title\">Configuration</Translate>\r\n      </h2>\r\n      <span>\r\n        <Translate contentKey=\"configuration.filter\">Filter</Translate>\r\n      </span>{' '}\r\n      <Input type=\"search\" value={filter} onChange={changeFilter} name=\"search\" id=\"search\" />\r\n      <label>Spring configuration</label>\r\n      <Table className=\"table table-striped table-bordered table-responsive d-table\">\r\n        <thead>\r\n          <tr>\r\n            <th onClick={changeReversePrefix}>\r\n              <Translate contentKey=\"configuration.table.prefix\">Prefix</Translate>\r\n            </th>\r\n            <th onClick={changeReverseProperties}>\r\n              <Translate contentKey=\"configuration.table.properties\">Properties</Translate>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {configProps.contexts\r\n            ? Object.values(getContextList(configProps.contexts))\r\n                .filter(propsFilterFn)\r\n                .map((property: any, propIndex) => (\r\n                  <tr key={propIndex}>\r\n                    <td>{property['prefix']}</td>\r\n                    <td>\r\n                      {Object.keys(property['properties']).map((propKey, index) => (\r\n                        <Row key={index}>\r\n                          <Col md=\"4\">{propKey}</Col>\r\n                          <Col md=\"8\">\r\n                            <Badge className=\"float-end bg-secondary break\">{JSON.stringify(property['properties'][propKey])}</Badge>\r\n                          </Col>\r\n                        </Row>\r\n                      ))}\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n            : null}\r\n        </tbody>\r\n      </Table>\r\n      {env.propertySources\r\n        ? env.propertySources.map((envKey, envIndex) => (\r\n            <div key={envIndex}>\r\n              <h4>\r\n                <span>{envKey.name}</span>\r\n              </h4>\r\n              <Table className=\"table table-sm table-striped table-bordered table-responsive d-table\">\r\n                <thead>\r\n                  <tr key={envIndex}>\r\n                    <th className=\"w-40\">Property</th>\r\n                    <th className=\"w-60\">Value</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {Object.keys(envKey.properties)\r\n                    .filter(envFilterFn)\r\n                    .map((propKey, propIndex) => (\r\n                      <tr key={propIndex}>\r\n                        <td className=\"break\">{propKey}</td>\r\n                        <td className=\"break\">\r\n                          <span className=\"float-end badge bg-secondary break\">{envKey.properties[propKey].value}</span>\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                </tbody>\r\n              </Table>\r\n            </div>\r\n          ))\r\n        : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConfigurationPage;\r\n","import './docs.scss';\r\n\r\nimport React from 'react';\r\n\r\nconst DocsPage = () => (\r\n  <div>\r\n    <iframe\r\n      src=\"../swagger-ui/index.html\"\r\n      width=\"100%\"\r\n      height=\"800\"\r\n      title=\"Swagger UI\"\r\n      seamless\r\n      style={{ border: 'none' }}\r\n      data-cy=\"swagger-frame\"\r\n    />\r\n  </div>\r\n);\r\n\r\nexport default DocsPage;\r\n","import React from 'react';\r\nimport { Table, Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\r\n\r\nconst formatDiskSpaceOutput = rawValue => {\r\n  // Should display storage space in an human readable unit\r\n  const val = rawValue / 1073741824;\r\n  if (val > 1) {\r\n    // Value\r\n    return val.toFixed(2) + ' GB';\r\n  }\r\n  return (rawValue / 1048576).toFixed(2) + ' MB';\r\n};\r\n\r\nconst HealthModal = ({ handleClose, healthObject, showModal }) => {\r\n  const data = healthObject.details || {};\r\n  return (\r\n    <Modal isOpen={showModal} modalTransition={{ timeout: 20 }} backdropTransition={{ timeout: 10 }} toggle={handleClose}>\r\n      <ModalHeader toggle={handleClose}>{healthObject.name}</ModalHeader>\r\n      <ModalBody>\r\n        <Table bordered>\r\n          <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>Value</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {Object.keys(data).map((key, index) => (\r\n              <tr key={index}>\r\n                <td>{key}</td>\r\n                <td>{healthObject.name === 'diskSpace' ? formatDiskSpaceOutput(data[key]) : JSON.stringify(data[key])}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button color=\"secondary\" onClick={handleClose}>\r\n          Close\r\n        </Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default HealthModal;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Translate } from 'react-jhipster';\r\nimport { Table, Badge, Col, Row, Button } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { useAppDispatch, useAppSelector } from 'app/config/store';\r\nimport HealthModal from './health-modal';\r\nimport { getSystemHealth } from '../administration.reducer';\r\n\r\nexport const HealthPage = () => {\r\n  const [healthObject, setHealthObject] = useState({});\r\n  const [showModal, setShowModal] = useState(false);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const health = useAppSelector(state => state.administration.health);\r\n  const isFetching = useAppSelector(state => state.administration.loading);\r\n\r\n  useEffect(() => {\r\n    dispatch(getSystemHealth());\r\n  }, []);\r\n\r\n  const fetchSystemHealth = () => {\r\n    if (!isFetching) {\r\n      dispatch(getSystemHealth());\r\n    }\r\n  };\r\n\r\n  const getSystemHealthInfo = (name, healthObj) => () => {\r\n    setShowModal(true);\r\n    setHealthObject({ ...healthObj, name });\r\n  };\r\n\r\n  const getBadgeType = (status: string) => (status !== 'UP' ? 'danger' : 'success');\r\n\r\n  const handleClose = () => setShowModal(false);\r\n\r\n  const renderModal = () => <HealthModal healthObject={healthObject} handleClose={handleClose} showModal={showModal} />;\r\n\r\n  const data = (health || {}).components || {};\r\n\r\n  return (\r\n    <div>\r\n      <h2 id=\"health-page-heading\" data-cy=\"healthPageHeading\">\r\n        Health Checks\r\n      </h2>\r\n      <p>\r\n        <Button onClick={fetchSystemHealth} color={isFetching ? 'btn btn-danger' : 'btn btn-primary'} disabled={isFetching}>\r\n          <FontAwesomeIcon icon=\"sync\" />\r\n          &nbsp;\r\n          <Translate component=\"span\" contentKey=\"health.refresh.button\">\r\n            Refresh\r\n          </Translate>\r\n        </Button>\r\n      </p>\r\n      <Row>\r\n        <Col md=\"12\">\r\n          <Table bordered aria-describedby=\"health-page-heading\">\r\n            <thead>\r\n              <tr>\r\n                <th>Service Name</th>\r\n                <th>Status</th>\r\n                <th>Details</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {Object.keys(data).map((configPropKey, configPropIndex) =>\r\n                configPropKey !== 'status' ? (\r\n                  <tr key={configPropIndex}>\r\n                    <td>{configPropKey}</td>\r\n                    <td>\r\n                      <Badge color={getBadgeType(data[configPropKey].status)}>{data[configPropKey].status}</Badge>\r\n                    </td>\r\n                    <td>\r\n                      {data[configPropKey].details ? (\r\n                        <a onClick={getSystemHealthInfo(configPropKey, data[configPropKey])}>\r\n                          <FontAwesomeIcon icon=\"eye\" />\r\n                        </a>\r\n                      ) : null}\r\n                    </td>\r\n                  </tr>\r\n                ) : null\r\n              )}\r\n            </tbody>\r\n          </Table>\r\n        </Col>\r\n      </Row>\r\n      {renderModal()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HealthPage;\r\n","import React from 'react';\r\n\r\nimport ErrorBoundaryRoute from 'app/shared/error/error-boundary-route';\r\nimport UserManagement from './user-management';\r\nimport Logs from './logs/logs';\r\nimport Health from './health/health';\r\nimport Metrics from './metrics/metrics';\r\nimport Configuration from './configuration/configuration';\r\nimport Docs from './docs/docs';\r\n\r\nconst Routes = ({ match }) => (\r\n  <div>\r\n    <ErrorBoundaryRoute path={`${match.url}/user-management`} component={UserManagement} />\r\n    <ErrorBoundaryRoute exact path={`${match.url}/health`} component={Health} />\r\n    <ErrorBoundaryRoute exact path={`${match.url}/metrics`} component={Metrics} />\r\n    <ErrorBoundaryRoute exact path={`${match.url}/configuration`} component={Configuration} />\r\n    <ErrorBoundaryRoute exact path={`${match.url}/logs`} component={Logs} />\r\n    <ErrorBoundaryRoute exact path={`${match.url}/docs`} component={Docs} />\r\n  </div>\r\n);\r\n\r\nexport default Routes;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Translate } from 'react-jhipster';\r\n\r\nimport { getLoggers, changeLogLevel } from '../administration.reducer';\r\nimport { useAppDispatch, useAppSelector } from 'app/config/store';\r\n\r\nexport const LogsPage = () => {\r\n  const [filter, setFilter] = useState('');\r\n  const logs = useAppSelector(state => state.administration.logs);\r\n  const isFetching = useAppSelector(state => state.administration.loading);\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getLoggers());\r\n  }, []);\r\n\r\n  const changeLevel = (loggerName, level) => () => dispatch(changeLogLevel(loggerName, level));\r\n\r\n  const changeFilter = evt => setFilter(evt.target.value);\r\n\r\n  const getClassName = (level, check, className) => (level === check ? `btn btn-sm btn-${className}` : 'btn btn-sm btn-light');\r\n\r\n  const filterFn = l => l.name.toUpperCase().includes(filter.toUpperCase());\r\n\r\n  const loggers = logs ? Object.entries(logs.loggers).map(e => ({ name: e[0], level: e[1].effectiveLevel })) : [];\r\n\r\n  return (\r\n    <div>\r\n      <h2 id=\"logs-page-heading\" data-cy=\"logsPageHeading\">\r\n        <Translate contentKey=\"logs.title\">Logs</Translate>\r\n      </h2>\r\n      <p>\r\n        <Translate contentKey=\"logs.nbloggers\" interpolate={{ total: loggers.length }}>\r\n          There are {loggers.length.toString()} loggers.\r\n        </Translate>\r\n      </p>\r\n\r\n      <span>\r\n        <Translate contentKey=\"logs.filter\">Filter</Translate>\r\n      </span>\r\n      <input type=\"text\" value={filter} onChange={changeFilter} className=\"form-control\" disabled={isFetching} />\r\n\r\n      <table className=\"table table-sm table-striped table-bordered\" aria-describedby=\"logs-page-heading\">\r\n        <thead>\r\n          <tr title=\"click to order\">\r\n            <th>\r\n              <span>\r\n                <Translate contentKey=\"logs.table.name\">Name</Translate>\r\n              </span>\r\n            </th>\r\n            <th>\r\n              <span>\r\n                <Translate contentKey=\"logs.table.level\">Level</Translate>\r\n              </span>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {loggers.filter(filterFn).map((logger, i) => (\r\n            <tr key={`log-row-${i}`}>\r\n              <td>\r\n                <small>{logger.name}</small>\r\n              </td>\r\n              <td>\r\n                <button\r\n                  disabled={isFetching}\r\n                  onClick={changeLevel(logger.name, 'TRACE')}\r\n                  className={getClassName(logger.level, 'TRACE', 'primary')}\r\n                >\r\n                  TRACE\r\n                </button>\r\n                <button\r\n                  disabled={isFetching}\r\n                  onClick={changeLevel(logger.name, 'DEBUG')}\r\n                  className={getClassName(logger.level, 'DEBUG', 'success')}\r\n                >\r\n                  DEBUG\r\n                </button>\r\n                <button\r\n                  disabled={isFetching}\r\n                  onClick={changeLevel(logger.name, 'INFO')}\r\n                  className={getClassName(logger.level, 'INFO', 'info')}\r\n                >\r\n                  INFO\r\n                </button>\r\n                <button\r\n                  disabled={isFetching}\r\n                  onClick={changeLevel(logger.name, 'WARN')}\r\n                  className={getClassName(logger.level, 'WARN', 'warning')}\r\n                >\r\n                  WARN\r\n                </button>\r\n                <button\r\n                  disabled={isFetching}\r\n                  onClick={changeLevel(logger.name, 'ERROR')}\r\n                  className={getClassName(logger.level, 'ERROR', 'danger')}\r\n                >\r\n                  ERROR\r\n                </button>\r\n                <button\r\n                  disabled={isFetching}\r\n                  onClick={changeLevel(logger.name, 'OFF')}\r\n                  className={getClassName(logger.level, 'OFF', 'secondary')}\r\n                >\r\n                  OFF\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LogsPage;\r\n","import React, { useEffect } from 'react';\r\nimport { Button, Col, Row } from 'reactstrap';\r\nimport {\r\n  CacheMetrics,\r\n  DatasourceMetrics,\r\n  GarbageCollectorMetrics,\r\n  HttpRequestMetrics,\r\n  JvmMemory,\r\n  JvmThreads,\r\n  EndpointsRequestsMetrics,\r\n  SystemMetrics,\r\n  Translate,\r\n} from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { APP_TIMESTAMP_FORMAT, APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT, APP_WHOLE_NUMBER_FORMAT } from 'app/config/constants';\r\nimport { getSystemMetrics, getSystemThreadDump } from '../administration.reducer';\r\nimport { useAppDispatch, useAppSelector } from 'app/config/store';\r\n\r\nexport const MetricsPage = () => {\r\n  const dispatch = useAppDispatch();\r\n  const metrics = useAppSelector(state => state.administration.metrics);\r\n  const isFetching = useAppSelector(state => state.administration.loading);\r\n  const threadDump = useAppSelector(state => state.administration.threadDump);\r\n\r\n  useEffect(() => {\r\n    dispatch(getSystemMetrics());\r\n    dispatch(getSystemThreadDump());\r\n  }, []);\r\n\r\n  const getMetrics = () => {\r\n    if (!isFetching) {\r\n      dispatch(getSystemMetrics());\r\n      dispatch(getSystemThreadDump());\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2 id=\"metrics-page-heading\" data-cy=\"metricsPageHeading\">\r\n        Application Metrics\r\n      </h2>\r\n      <p>\r\n        <Button onClick={getMetrics} color={isFetching ? 'btn btn-danger' : 'btn btn-primary'} disabled={isFetching}>\r\n          <FontAwesomeIcon icon=\"sync\" />\r\n          &nbsp;\r\n          <Translate component=\"span\" contentKey=\"health.refresh.button\">\r\n            Refresh\r\n          </Translate>\r\n        </Button>\r\n      </p>\r\n      <hr />\r\n\r\n      <Row>\r\n        <Col sm=\"12\">\r\n          <h3>JVM Metrics</h3>\r\n          <Row>\r\n            <Col md=\"4\">{metrics?.jvm ? <JvmMemory jvmMetrics={metrics.jvm} wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT} /> : ''}</Col>\r\n            <Col md=\"4\">{threadDump ? <JvmThreads jvmThreads={threadDump} wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT} /> : ''}</Col>\r\n            <Col md=\"4\">\r\n              {metrics?.processMetrics ? (\r\n                <SystemMetrics\r\n                  systemMetrics={metrics.processMetrics}\r\n                  wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT}\r\n                  timestampFormat={APP_TIMESTAMP_FORMAT}\r\n                />\r\n              ) : (\r\n                ''\r\n              )}\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n\r\n      {metrics?.garbageCollector ? (\r\n        <GarbageCollectorMetrics garbageCollectorMetrics={metrics.garbageCollector} wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT} />\r\n      ) : (\r\n        ''\r\n      )}\r\n      {metrics && metrics['http.server.requests'] ? (\r\n        <HttpRequestMetrics\r\n          requestMetrics={metrics['http.server.requests']}\r\n          twoDigitAfterPointFormat={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\r\n          wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT}\r\n        />\r\n      ) : (\r\n        ''\r\n      )}\r\n      {metrics?.services ? (\r\n        <EndpointsRequestsMetrics endpointsRequestsMetrics={metrics.services} wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT} />\r\n      ) : (\r\n        ''\r\n      )}\r\n\r\n      {metrics?.cache ? (\r\n        <Row>\r\n          <Col sm=\"12\">\r\n            <CacheMetrics cacheMetrics={metrics.cache} twoDigitAfterPointFormat={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\r\n          </Col>\r\n        </Row>\r\n      ) : (\r\n        ''\r\n      )}\r\n\r\n      {metrics?.databases && JSON.stringify(metrics.databases) !== '{}' ? (\r\n        <Row>\r\n          <Col sm=\"12\">\r\n            <DatasourceMetrics datasourceMetrics={metrics.databases} twoDigitAfterPointFormat={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\r\n          </Col>\r\n        </Row>\r\n      ) : (\r\n        ''\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MetricsPage;\r\n","import React from 'react';\r\nimport { Switch } from 'react-router-dom';\r\n\r\nimport ErrorBoundaryRoute from 'app/shared/error/error-boundary-route';\r\nimport UserManagement from './user-management';\r\nimport UserManagementDetail from './user-management-detail';\r\nimport UserManagementUpdate from './user-management-update';\r\nimport UserManagementDeleteDialog from './user-management-delete-dialog';\r\n\r\nconst Routes = ({ match }) => (\r\n  <>\r\n    <Switch>\r\n      <ErrorBoundaryRoute exact path={`${match.url}/new`} component={UserManagementUpdate} />\r\n      <ErrorBoundaryRoute exact path={`${match.url}/:login/edit`} component={UserManagementUpdate} />\r\n      <ErrorBoundaryRoute exact path={`${match.url}/:login`} component={UserManagementDetail} />\r\n      <ErrorBoundaryRoute path={match.url} component={UserManagement} />\r\n    </Switch>\r\n    <ErrorBoundaryRoute path={`${match.url}/:login/delete`} component={UserManagementDeleteDialog} />\r\n  </>\r\n);\r\n\r\nexport default Routes;\r\n","import React, { useEffect } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\r\nimport { Translate } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { getUser, deleteUser } from './user-management.reducer';\r\nimport { useAppDispatch, useAppSelector } from 'app/config/store';\r\n\r\nexport const UserManagementDeleteDialog = (props: RouteComponentProps<{ login: string }>) => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUser(props.match.params.login));\r\n  }, []);\r\n\r\n  const handleClose = event => {\r\n    event.stopPropagation();\r\n    props.history.push('/admin/user-management');\r\n  };\r\n\r\n  const user = useAppSelector(state => state.userManagement.user);\r\n\r\n  const confirmDelete = event => {\r\n    dispatch(deleteUser(user.login));\r\n    handleClose(event);\r\n  };\r\n\r\n  return (\r\n    <Modal isOpen toggle={handleClose}>\r\n      <ModalHeader toggle={handleClose}>\r\n        <Translate contentKey=\"entity.delete.title\">Confirm delete operation</Translate>\r\n      </ModalHeader>\r\n      <ModalBody>\r\n        <Translate contentKey=\"userManagement.delete.question\" interpolate={{ login: user.login }}>\r\n          Are you sure you want to delete this User?\r\n        </Translate>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button color=\"secondary\" onClick={handleClose}>\r\n          <FontAwesomeIcon icon=\"ban\" />\r\n          &nbsp;\r\n          <Translate contentKey=\"entity.action.cancel\">Cancel</Translate>\r\n        </Button>\r\n        <Button color=\"danger\" onClick={confirmDelete}>\r\n          <FontAwesomeIcon icon=\"trash\" />\r\n          &nbsp;\r\n          <Translate contentKey=\"entity.action.delete\">Delete</Translate>\r\n        </Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default UserManagementDeleteDialog;\r\n","import React, { useEffect } from 'react';\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport { Button, Row, Badge } from 'reactstrap';\r\nimport { Translate, TextFormat } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { APP_DATE_FORMAT } from 'app/config/constants';\r\nimport { languages } from 'app/config/translation';\r\nimport { getUser } from './user-management.reducer';\r\nimport { useAppDispatch, useAppSelector } from 'app/config/store';\r\n\r\nexport const UserManagementDetail = (props: RouteComponentProps<{ login: string }>) => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUser(props.match.params.login));\r\n  }, []);\r\n\r\n  const user = useAppSelector(state => state.userManagement.user);\r\n\r\n  return (\r\n    <div>\r\n      <h2>\r\n        <Translate contentKey=\"userManagement.detail.title\">User</Translate> [<strong>{user.login}</strong>]\r\n      </h2>\r\n      <Row size=\"md\">\r\n        <dl className=\"jh-entity-details\">\r\n          <dt>\r\n            <Translate contentKey=\"userManagement.login\">Login</Translate>\r\n          </dt>\r\n          <dd>\r\n            <span>{user.login}</span>&nbsp;\r\n            {user.activated ? (\r\n              <Badge color=\"success\">\r\n                <Translate contentKey=\"userManagement.activated\">Activated</Translate>\r\n              </Badge>\r\n            ) : (\r\n              <Badge color=\"danger\">\r\n                <Translate contentKey=\"userManagement.deactivated\">Deactivated</Translate>\r\n              </Badge>\r\n            )}\r\n          </dd>\r\n          <dt>\r\n            <Translate contentKey=\"userManagement.firstName\">First Name</Translate>\r\n          </dt>\r\n          <dd>{user.firstName}</dd>\r\n          <dt>\r\n            <Translate contentKey=\"userManagement.lastName\">Last Name</Translate>\r\n          </dt>\r\n          <dd>{user.lastName}</dd>\r\n          <dt>\r\n            <Translate contentKey=\"userManagement.email\">Email</Translate>\r\n          </dt>\r\n          <dd>{user.email}</dd>\r\n          <dt>\r\n            <Translate contentKey=\"userManagement.langKey\">Lang Key</Translate>\r\n          </dt>\r\n          <dd>{user.langKey ? languages[user.langKey].name : undefined}</dd>\r\n          <dt>\r\n            <Translate contentKey=\"userManagement.createdBy\">Created By</Translate>\r\n          </dt>\r\n          <dd>{user.createdBy}</dd>\r\n          <dt>\r\n            <Translate contentKey=\"userManagement.createdDate\">Created Date</Translate>\r\n          </dt>\r\n          <dd>{user.createdDate ? <TextFormat value={user.createdDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid /> : null}</dd>\r\n          <dt>\r\n            <Translate contentKey=\"userManagement.lastModifiedBy\">Last Modified By</Translate>\r\n          </dt>\r\n          <dd>{user.lastModifiedBy}</dd>\r\n          <dt>\r\n            <Translate contentKey=\"userManagement.lastModifiedDate\">Last Modified Date</Translate>\r\n          </dt>\r\n          <dd>\r\n            {user.lastModifiedDate ? (\r\n              <TextFormat value={user.lastModifiedDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid />\r\n            ) : null}\r\n          </dd>\r\n          <dt>\r\n            <Translate contentKey=\"userManagement.profiles\">Profiles</Translate>\r\n          </dt>\r\n          <dd>\r\n            <ul className=\"list-unstyled\">\r\n              {user.authorities\r\n                ? user.authorities.map((authority, i) => (\r\n                    <li key={`user-auth-${i}`}>\r\n                      <Badge color=\"info\">{authority}</Badge>\r\n                    </li>\r\n                  ))\r\n                : null}\r\n            </ul>\r\n          </dd>\r\n        </dl>\r\n      </Row>\r\n      <Button tag={Link} to=\"/admin/user-management\" replace color=\"info\">\r\n        <FontAwesomeIcon icon=\"arrow-left\" />{' '}\r\n        <span className=\"d-none d-md-inline\">\r\n          <Translate contentKey=\"entity.action.back\">Back</Translate>\r\n        </span>\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserManagementDetail;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport { Button, Row, Col, FormText } from 'reactstrap';\r\nimport { Translate, translate, ValidatedField, ValidatedForm, isEmail } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { locales, languages } from 'app/config/translation';\r\nimport { getUser, getRoles, updateUser, createUser, reset } from './user-management.reducer';\r\nimport { useAppDispatch, useAppSelector } from 'app/config/store';\r\n\r\nexport const UserManagementUpdate = (props: RouteComponentProps<{ login: string }>) => {\r\n  const [isNew] = useState(!props.match.params || !props.match.params.login);\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    if (isNew) {\r\n      dispatch(reset());\r\n    } else {\r\n      dispatch(getUser(props.match.params.login));\r\n    }\r\n    dispatch(getRoles());\r\n    return () => {\r\n      dispatch(reset());\r\n    };\r\n  }, [props.match.params.login]);\r\n\r\n  const handleClose = () => {\r\n    props.history.push('/admin/user-management');\r\n  };\r\n\r\n  const saveUser = values => {\r\n    if (isNew) {\r\n      dispatch(createUser(values));\r\n    } else {\r\n      dispatch(updateUser(values));\r\n    }\r\n    handleClose();\r\n  };\r\n\r\n  const isInvalid = false;\r\n  const user = useAppSelector(state => state.userManagement.user);\r\n  const loading = useAppSelector(state => state.userManagement.loading);\r\n  const updating = useAppSelector(state => state.userManagement.updating);\r\n  const authorities = useAppSelector(state => state.userManagement.authorities);\r\n\r\n  return (\r\n    <div>\r\n      <Row className=\"justify-content-center\">\r\n        <Col md=\"8\">\r\n          <h1>\r\n            <Translate contentKey=\"userManagement.home.createOrEditLabel\">Create or edit a User</Translate>\r\n          </h1>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"justify-content-center\">\r\n        <Col md=\"8\">\r\n          {loading ? (\r\n            <p>Loading...</p>\r\n          ) : (\r\n            <ValidatedForm onSubmit={saveUser} defaultValues={user}>\r\n              {user.id ? (\r\n                <ValidatedField\r\n                  type=\"text\"\r\n                  name=\"id\"\r\n                  required\r\n                  readOnly\r\n                  label={translate('global.field.id')}\r\n                  validate={{ required: true }}\r\n                />\r\n              ) : null}\r\n              <ValidatedField\r\n                type=\"text\"\r\n                name=\"login\"\r\n                label={translate('userManagement.login')}\r\n                validate={{\r\n                  required: {\r\n                    value: true,\r\n                    message: translate('register.messages.validate.login.required'),\r\n                  },\r\n                  pattern: {\r\n                    value: /^[a-zA-Z0-9!$&*+=?^_`{|}~.-]+@[a-zA-Z0-9-]+(?:\\\\.[a-zA-Z0-9-]+)*$|^[_.@A-Za-z0-9-]+$/,\r\n                    message: translate('register.messages.validate.login.pattern'),\r\n                  },\r\n                  minLength: {\r\n                    value: 1,\r\n                    message: translate('register.messages.validate.login.minlength'),\r\n                  },\r\n                  maxLength: {\r\n                    value: 50,\r\n                    message: translate('register.messages.validate.login.maxlength'),\r\n                  },\r\n                }}\r\n              />\r\n              <ValidatedField\r\n                type=\"text\"\r\n                name=\"firstName\"\r\n                label={translate('userManagement.firstName')}\r\n                validate={{\r\n                  maxLength: {\r\n                    value: 50,\r\n                    message: translate('entity.validation.maxlength', { max: 50 }),\r\n                  },\r\n                }}\r\n              />\r\n              <ValidatedField\r\n                type=\"text\"\r\n                name=\"lastName\"\r\n                label={translate('userManagement.lastName')}\r\n                validate={{\r\n                  maxLength: {\r\n                    value: 50,\r\n                    message: translate('entity.validation.maxlength', { max: 50 }),\r\n                  },\r\n                }}\r\n              />\r\n              <FormText>This field cannot be longer than 50 characters.</FormText>\r\n              <ValidatedField\r\n                name=\"email\"\r\n                label={translate('global.form.email.label')}\r\n                placeholder={translate('global.form.email.placeholder')}\r\n                type=\"email\"\r\n                validate={{\r\n                  required: {\r\n                    value: true,\r\n                    message: translate('global.messages.validate.email.required'),\r\n                  },\r\n                  minLength: {\r\n                    value: 5,\r\n                    message: translate('global.messages.validate.email.minlength'),\r\n                  },\r\n                  maxLength: {\r\n                    value: 254,\r\n                    message: translate('global.messages.validate.email.maxlength'),\r\n                  },\r\n                  validate: v => isEmail(v) || translate('global.messages.validate.email.invalid'),\r\n                }}\r\n              />\r\n              <ValidatedField\r\n                type=\"checkbox\"\r\n                name=\"activated\"\r\n                check\r\n                value={true}\r\n                disabled={!user.id}\r\n                label={translate('userManagement.activated')}\r\n              />\r\n              <ValidatedField type=\"select\" name=\"langKey\" label={translate('userManagement.langKey')}>\r\n                {locales.map(locale => (\r\n                  <option value={locale} key={locale}>\r\n                    {languages[locale].name}\r\n                  </option>\r\n                ))}\r\n              </ValidatedField>\r\n              <ValidatedField type=\"select\" name=\"authorities\" multiple label={translate('userManagement.profiles')}>\r\n                {authorities.map(role => (\r\n                  <option value={role} key={role}>\r\n                    {role}\r\n                  </option>\r\n                ))}\r\n              </ValidatedField>\r\n              <Button tag={Link} to=\"/admin/user-management\" replace color=\"info\">\r\n                <FontAwesomeIcon icon=\"arrow-left\" />\r\n                &nbsp;\r\n                <span className=\"d-none d-md-inline\">\r\n                  <Translate contentKey=\"entity.action.back\">Back</Translate>\r\n                </span>\r\n              </Button>\r\n              &nbsp;\r\n              <Button color=\"secondary\" type=\"submit\" disabled={isInvalid || updating}>\r\n                <FontAwesomeIcon icon=\"save\" />\r\n                &nbsp;\r\n                <Translate contentKey=\"entity.action.save\">Save</Translate>\r\n              </Button>\r\n            </ValidatedForm>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserManagementUpdate;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport { Button, Table, Badge } from 'reactstrap';\r\nimport { Translate, TextFormat, JhiPagination, JhiItemCount, getSortState } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { APP_DATE_FORMAT } from 'app/config/constants';\r\nimport { ASC, DESC, ITEMS_PER_PAGE, SORT } from 'app/shared/util/pagination.constants';\r\nimport { overridePaginationStateWithQueryParams } from 'app/shared/util/entity-utils';\r\nimport { getUsersAsAdmin, updateUser } from './user-management.reducer';\r\nimport { useAppDispatch, useAppSelector } from 'app/config/store';\r\n\r\nexport const UserManagement = (props: RouteComponentProps<any>) => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const [pagination, setPagination] = useState(\r\n    overridePaginationStateWithQueryParams(getSortState(props.location, ITEMS_PER_PAGE, 'id'), props.location.search)\r\n  );\r\n\r\n  const getUsersFromProps = () => {\r\n    dispatch(\r\n      getUsersAsAdmin({\r\n        page: pagination.activePage - 1,\r\n        size: pagination.itemsPerPage,\r\n        sort: `${pagination.sort},${pagination.order}`,\r\n      })\r\n    );\r\n    const endURL = `?page=${pagination.activePage}&sort=${pagination.sort},${pagination.order}`;\r\n    if (props.location.search !== endURL) {\r\n      props.history.push(`${props.location.pathname}${endURL}`);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUsersFromProps();\r\n  }, [pagination.activePage, pagination.order, pagination.sort]);\r\n\r\n  useEffect(() => {\r\n    const params = new URLSearchParams(props.location.search);\r\n    const page = params.get('page');\r\n    const sortParam = params.get(SORT);\r\n    if (page && sortParam) {\r\n      const sortSplit = sortParam.split(',');\r\n      setPagination({\r\n        ...pagination,\r\n        activePage: +page,\r\n        sort: sortSplit[0],\r\n        order: sortSplit[1],\r\n      });\r\n    }\r\n  }, [props.location.search]);\r\n\r\n  const sort = p => () =>\r\n    setPagination({\r\n      ...pagination,\r\n      order: pagination.order === ASC ? DESC : ASC,\r\n      sort: p,\r\n    });\r\n\r\n  const handlePagination = currentPage =>\r\n    setPagination({\r\n      ...pagination,\r\n      activePage: currentPage,\r\n    });\r\n\r\n  const handleSyncList = () => {\r\n    getUsersFromProps();\r\n  };\r\n\r\n  const toggleActive = user => () =>\r\n    dispatch(\r\n      updateUser({\r\n        ...user,\r\n        activated: !user.activated,\r\n      })\r\n    );\r\n\r\n  const { match } = props;\r\n  const account = useAppSelector(state => state.authentication.account);\r\n  const users = useAppSelector(state => state.userManagement.users);\r\n  const totalItems = useAppSelector(state => state.userManagement.totalItems);\r\n  const loading = useAppSelector(state => state.userManagement.loading);\r\n\r\n  return (\r\n    <div>\r\n      <h2 id=\"user-management-page-heading\" data-cy=\"userManagementPageHeading\">\r\n        <Translate contentKey=\"userManagement.home.title\">Users</Translate>\r\n        <div className=\"d-flex justify-content-end\">\r\n          <Button className=\"me-2\" color=\"secondary\" onClick={handleSyncList} disabled={loading}>\r\n            <FontAwesomeIcon icon=\"sync\" spin={loading} />{' '}\r\n            <Translate contentKey=\"userManagement.home.refreshListLabel\">Refresh List</Translate>\r\n          </Button>\r\n          <Link to={`${match.url}/new`} className=\"btn btn-primary jh-create-entity\">\r\n            <FontAwesomeIcon icon=\"plus\" /> <Translate contentKey=\"userManagement.home.createLabel\">Create a new user</Translate>\r\n          </Link>\r\n        </div>\r\n      </h2>\r\n      <Table responsive striped>\r\n        <thead>\r\n          <tr>\r\n            <th className=\"hand\" onClick={sort('id')}>\r\n              <Translate contentKey=\"global.field.id\">ID</Translate>\r\n              <FontAwesomeIcon icon=\"sort\" />\r\n            </th>\r\n            <th className=\"hand\" onClick={sort('login')}>\r\n              <Translate contentKey=\"userManagement.login\">Login</Translate>\r\n              <FontAwesomeIcon icon=\"sort\" />\r\n            </th>\r\n            <th className=\"hand\" onClick={sort('email')}>\r\n              <Translate contentKey=\"userManagement.email\">Email</Translate>\r\n              <FontAwesomeIcon icon=\"sort\" />\r\n            </th>\r\n            <th />\r\n            <th className=\"hand\" onClick={sort('langKey')}>\r\n              <Translate contentKey=\"userManagement.langKey\">Lang Key</Translate>\r\n              <FontAwesomeIcon icon=\"sort\" />\r\n            </th>\r\n            <th>\r\n              <Translate contentKey=\"userManagement.profiles\">Profiles</Translate>\r\n            </th>\r\n            <th className=\"hand\" onClick={sort('createdDate')}>\r\n              <Translate contentKey=\"userManagement.createdDate\">Created Date</Translate>\r\n              <FontAwesomeIcon icon=\"sort\" />\r\n            </th>\r\n            <th className=\"hand\" onClick={sort('lastModifiedBy')}>\r\n              <Translate contentKey=\"userManagement.lastModifiedBy\">Last Modified By</Translate>\r\n              <FontAwesomeIcon icon=\"sort\" />\r\n            </th>\r\n            <th id=\"modified-date-sort\" className=\"hand\" onClick={sort('lastModifiedDate')}>\r\n              <Translate contentKey=\"userManagement.lastModifiedDate\">Last Modified Date</Translate>\r\n              <FontAwesomeIcon icon=\"sort\" />\r\n            </th>\r\n            <th />\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {users.map((user, i) => (\r\n            <tr id={user.login} key={`user-${i}`}>\r\n              <td>\r\n                <Button tag={Link} to={`${match.url}/${user.login}`} color=\"link\" size=\"sm\">\r\n                  {user.id}\r\n                </Button>\r\n              </td>\r\n              <td>{user.login}</td>\r\n              <td>{user.email}</td>\r\n              <td>\r\n                {user.activated ? (\r\n                  <Button color=\"secondary\" onClick={toggleActive(user)}>\r\n                    <Translate contentKey=\"userManagement.activated\">Activated</Translate>\r\n                  </Button>\r\n                ) : (\r\n                  <Button color=\"secondary\" onClick={toggleActive(user)}>\r\n                    <Translate contentKey=\"userManagement.deactivated\">Deactivated</Translate>\r\n                  </Button>\r\n                )}\r\n              </td>\r\n              <td>{user.langKey}</td>\r\n              <td>\r\n                {user.authorities\r\n                  ? user.authorities.map((authority, j) => (\r\n                      <div key={`user-auth-${i}-${j}`}>\r\n                        <Badge color=\"info\">{authority}</Badge>\r\n                      </div>\r\n                    ))\r\n                  : null}\r\n              </td>\r\n              <td>\r\n                {user.createdDate ? <TextFormat value={user.createdDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid /> : null}\r\n              </td>\r\n              <td>{user.lastModifiedBy}</td>\r\n              <td>\r\n                {user.lastModifiedDate ? (\r\n                  <TextFormat value={user.lastModifiedDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid />\r\n                ) : null}\r\n              </td>\r\n              <td className=\"text-end\">\r\n                <div className=\"btn-group flex-btn-group-container\">\r\n                  <Button tag={Link} to={`${match.url}/${user.login}`} color=\"secondary\" size=\"sm\">\r\n                    <FontAwesomeIcon icon=\"eye\" />{' '}\r\n                    <span className=\"d-none d-md-inline\">\r\n                      <Translate contentKey=\"entity.action.view\">View</Translate>\r\n                    </span>\r\n                  </Button>\r\n                  <Button tag={Link} to={`${match.url}/${user.login}/edit`} color=\"secondary\" size=\"sm\">\r\n                    <FontAwesomeIcon icon=\"pencil-alt\" />{' '}\r\n                    <span className=\"d-none d-md-inline\">\r\n                      <Translate contentKey=\"entity.action.edit\">Edit</Translate>\r\n                    </span>\r\n                  </Button>\r\n                  <Button\r\n                    tag={Link}\r\n                    to={`${match.url}/${user.login}/delete`}\r\n                    color=\"danger\"\r\n                    size=\"sm\"\r\n                    disabled={account.login === user.login}\r\n                  >\r\n                    <FontAwesomeIcon icon=\"trash\" />{' '}\r\n                    <span className=\"d-none d-md-inline\">\r\n                      <Translate contentKey=\"entity.action.delete\">Delete</Translate>\r\n                    </span>\r\n                  </Button>\r\n                </div>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n      {totalItems ? (\r\n        <div className={users?.length > 0 ? '' : 'd-none'}>\r\n          <div className=\"justify-content-center d-flex\">\r\n            <JhiItemCount page={pagination.activePage} total={totalItems} itemsPerPage={pagination.itemsPerPage} i18nEnabled />\r\n          </div>\r\n          <div className=\"justify-content-center d-flex\">\r\n            <JhiPagination\r\n              activePage={pagination.activePage}\r\n              onSelect={handlePagination}\r\n              maxButtons={5}\r\n              itemsPerPage={pagination.itemsPerPage}\r\n              totalItems={totalItems}\r\n            />\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        ''\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserManagement;\r\n","export const ITEMS_PER_PAGE = 20;\r\nexport const ASC = 'asc';\r\nexport const DESC = 'desc';\r\nexport const SORT = 'sort';\r\n"],"names":[],"sourceRoot":""}